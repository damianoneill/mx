// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using mx;
//
//    var welcome = Welcome.FromJson(jsonString);

namespace mx
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Welcome
    {
        [JsonProperty("data")]
        public Datum[] Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("series")]
        public string Series { get; set; }

        [JsonProperty("race")]
        public string Race { get; set; }

        [JsonProperty("date")]
        public string Date { get; set; }

        [JsonProperty("round")]
        public long Round { get; set; }

        [JsonProperty("location")]
        public string Location { get; set; }

        [JsonProperty("track")]
        public string Track { get; set; }

        [JsonProperty("classMoto")]
        public string ClassMoto { get; set; }

        [JsonProperty("racedata6")]
        public string Racedata6 { get; set; }

        [JsonProperty("class")]
        public long Class { get; set; }

        [JsonProperty("riderData")]
        public RiderDatum[] RiderData { get; set; }

        [JsonProperty("yearTrack")]
        public string YearTrack { get; set; }

        [JsonProperty("moto")]
        public long Moto { get; set; }
    }

    public partial class RiderDatum
    {
        [JsonProperty("1")]
        public The1 The1 { get; set; }

        [JsonProperty("2")]
        public string The2 { get; set; }

        [JsonProperty("3", NullValueHandling = NullValueHandling.Ignore)]
        public string The3 { get; set; }

        [JsonProperty("4", NullValueHandling = NullValueHandling.Ignore)]
        public string The4 { get; set; }

        [JsonProperty("5", NullValueHandling = NullValueHandling.Ignore)]
        public string The5 { get; set; }

        [JsonProperty("6", NullValueHandling = NullValueHandling.Ignore)]
        public string The6 { get; set; }

        [JsonProperty("7", NullValueHandling = NullValueHandling.Ignore)]
        public string The7 { get; set; }

        [JsonProperty("8", NullValueHandling = NullValueHandling.Ignore)]
        public string The8 { get; set; }

        [JsonProperty("9", NullValueHandling = NullValueHandling.Ignore)]
        public string The9 { get; set; }

        [JsonProperty("10", NullValueHandling = NullValueHandling.Ignore)]
        public string The10 { get; set; }

        [JsonProperty("11", NullValueHandling = NullValueHandling.Ignore)]
        public string The11 { get; set; }

        [JsonProperty("12", NullValueHandling = NullValueHandling.Ignore)]
        public string The12 { get; set; }

        [JsonProperty("bike")]
        public Bike Bike { get; set; }

        [JsonProperty("number")]
        public string Number { get; set; }

        [JsonProperty("name", NullValueHandling = NullValueHandling.Ignore)]
        public string Name { get; set; }

        [JsonProperty("13", NullValueHandling = NullValueHandling.Ignore)]
        public string The13 { get; set; }

        [JsonProperty("14", NullValueHandling = NullValueHandling.Ignore)]
        public string The14 { get; set; }

        [JsonProperty("15", NullValueHandling = NullValueHandling.Ignore)]
        public string The15 { get; set; }

        [JsonProperty("16", NullValueHandling = NullValueHandling.Ignore)]
        public string The16 { get; set; }

        [JsonProperty("B", NullValueHandling = NullValueHandling.Ignore)]
        public string B { get; set; }
    }

    public enum Bike { Hon, Hus, Kaw, Ktm, Suz, Yam };

    public enum The1 { Empty };

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, mx.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, mx.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                The1Converter.Singleton,
                BikeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class The1Converter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(The1) || t == typeof(The1?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "--.---")
            {
                return The1.Empty;
            }
            throw new Exception("Cannot unmarshal type The1");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (The1)untypedValue;
            if (value == The1.Empty)
            {
                serializer.Serialize(writer, "--.---");
                return;
            }
            throw new Exception("Cannot marshal type The1");
        }

        public static readonly The1Converter Singleton = new The1Converter();
    }

    internal class BikeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Bike) || t == typeof(Bike?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "HON":
                    return Bike.Hon;
                case "HUS":
                    return Bike.Hus;
                case "KAW":
                    return Bike.Kaw;
                case "KTM":
                    return Bike.Ktm;
                case "SUZ":
                    return Bike.Suz;
                case "YAM":
                    return Bike.Yam;
            }
            throw new Exception("Cannot unmarshal type Bike");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Bike)untypedValue;
            switch (value)
            {
                case Bike.Hon:
                    serializer.Serialize(writer, "HON");
                    return;
                case Bike.Hus:
                    serializer.Serialize(writer, "HUS");
                    return;
                case Bike.Kaw:
                    serializer.Serialize(writer, "KAW");
                    return;
                case Bike.Ktm:
                    serializer.Serialize(writer, "KTM");
                    return;
                case Bike.Suz:
                    serializer.Serialize(writer, "SUZ");
                    return;
                case Bike.Yam:
                    serializer.Serialize(writer, "YAM");
                    return;
            }
            throw new Exception("Cannot marshal type Bike");
        }

        public static readonly BikeConverter Singleton = new BikeConverter();
    }
}
